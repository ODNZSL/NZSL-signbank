Description: Ignore FullResultSet exception introduced in Django 4.2
 As of version 4.2 Django added an exception during query generation when a
 query matches everything contained in a table. Since the
 models.usage_for_queryset function is meant to handle this case, this patch
 instead uses the exception to determine if extra criteria are required. This
 effectively replaces the if statement that determines if a "where" value was
 generated. The if statement is maintained along with the ImportError skip to
 keep compatibility with older Django versions.
Author: Lena Voytek <lena.voytek@canonical.com>
Last-Update: 2023-08-01
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/tagging/models.py
+++ b/tagging/models.py
@@ -9,6 +9,12 @@
 from django.utils.encoding import smart_str
 from django.utils.translation import gettext_lazy as _
 
+# FullResultSet exception is new to Django 4.2
+try:
+    from django.core.exceptions import FullResultSet
+except ImportError:
+    pass
+
 from tagging import settings
 from tagging.utils import LOGARITHMIC
 from tagging.utils import calculate_cloud
@@ -177,13 +183,21 @@
         Passing a value for ``min_count`` implies ``counts=True``.
         """
         compiler = queryset.query.get_compiler(using=queryset.db)
-        where, params = compiler.compile(queryset.query.where)
-        extra_joins = ' '.join(compiler.get_from_clause()[0][1:])
+        params = []
+
+        try:
+            where, params = compiler.compile(queryset.query.where)
+
+            if where:
+                extra_criteria = 'AND %s' % where
+            else:
+                extra_criteria = ''
 
-        if where:
-            extra_criteria = 'AND %s' % where
-        else:
+        except FullResultSet:
             extra_criteria = ''
+
+        extra_joins = ' '.join(compiler.get_from_clause()[0][1:])
+
         return self._get_usage(queryset.model, counts, min_count,
                                extra_joins, extra_criteria, params)
 
